searchState.loadedDescShard("nib", 0, "A module defining interfaces for an acceleration structure\nA module defining the generic interface for cameras and …\nThis module handles everything related to the CLI …\nA module defining an interface for objects in a scene that …\nExport a framebuffer to some image format\nThe integrator module defines several integrators, and …\nDefines the interface for materials that are associated …\nUtility math functions\nDefines a <code>Ray</code> type with convenience methods\nThe renderer implementation, which is pretty much the …\nThe sampler interface\nA module providing definitions and methods for a scene. A …\nDefines generic numeric types for the integrator so that …\nThe <code>Accel</code> trait is a generic trait for acceleration …\nAn error associated with acceleration structures\nThe result of a query to an acceleration structure.\nA result that can return an <code>AccelError</code>\nContains the error value\nContains the success value\nThe different types of acceleration structures that can be …\nA reference to an object that consists of a geometric form …\nReturn whether the incoming ray collided with any of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe geometric primitive that might be hit by the light ray …\nThe details of the collision\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe “list” acceleration structure for computing …\nA reference to the BSDF method for\nA reference to the textured object (a geometric primitive …\nConstruct an acceleration structure from a list of …\nA naive list “acceleration structure” for computing …\nThe parameters for a basic object list\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA list of every object in the scene\nThe generic interface for a camera type\nThe different types of cameras that can be used in the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImplementations of pinhole cameras\nA model of a thin-lens camera\nConvert (u, v) pixel coordinates to a ray in 3D space\nThe classic pinhole camera\nA pinhole camera, much like <code>BasicPinhole</code>, that allows you …\nThe aspect ratio of\nReturn the standard camera parameters as defined in page …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe horizontal span of the camera’s field of view\nInitialize the Pinhole camera with computed parameters\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe lower left corner of the camera’s field of view\nThe origin point of the camera’s field of view\nThe origin point of the camera\nThe target that the camera is pointing towards from the …\nWhich direction you consider up for the camera\nThe vertical span of the camera’s field of view\nThe vertical field of view of the camera\nA thin lens camera model\nThe aspect ratio of the camera\nThe internal basic pinhole camera that we keep around for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe origin point of the camera\nThe target that the camera is pointing towards from the …\nWhich direction you consider up for the camera\nThe vertical field of view of the camera\nAn oxidized renderer\nParse the input scene file based on the file extension\nThe file type of the scene description file. If this is …\nReturns the argument unchanged.\nIf enabled, this flag will hide the progress bar. The …\nCalls <code>U::from(self)</code>.\nOnly parse the scene file and do nothing else. This can be …\nThe filename of the output file. If this is not provided …\nThe path to the file describing the scene\nThe number of threads to use in the renderer. If this isn…\nInformation pertaining to a ray intersection\nAn interface for any object that can intersect with a ray …\nThe different types of <code>Hittable</code> types that can be used as …\nA serializable wrapper for the\nThe struct for some object in the scene that can be …\nThe distance from the origin ray to the point of collision\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe geometric primitive that might be hit by the light ray …\nThe geometric primitive that might be hit by the light ray …\nA method that returns a hit record if the object was hit\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA reference to the BSDF function that corresponds to the …\nA reference to the BSDF method for\nThe normal vector for the intersection\nThe point in space where the object was hit\nAn implementation of the sphere primitive\nAn implementation of the triangle primitive hittable\nA sphere primitive\nThe center of the sphere in spatial coordinates\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe radius of the sphere\nA geometric triangle\nThe “handedness” of the coordinate system used to …\nA geometric triangle\nThe default implementation of a triangle defines the …\nA helper method for serde to infer the default handedness …\nThe edges of the triangle\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe direction in which the vertices of the triangle are …\nAn implementation of the Moller-Trumbore algorithm for …\nInitialize a <code>Triangle</code> from its parameters\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe normal vector relative to the supporting plane of the …\nThe coordinates defining the bounds of the triangle in …\nThe coordinates defining the bounds of the triangle …\nContains the error value\nThe possible errors that can arise when exporting a …\nA result that can return an <code>ExporterError</code>\nSomething that can export a framebuffer of <code>PixelValue</code>s to …\nThe “base” trait for a <code>FrameBufferExporter</code>\nThe maximum color value that a framebuffer\nContains the success value\nAn enum type describing the possible output filetypes for …\nExport a framebuffer to the PPM image format\nExport a buffer of pixel values to a file\nExport a buffer of floating point pixel values to some …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate the header for the image format\nThe height of the output image\nThe height of the output image\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe width of the output image\nThe width of the output image\nA trait that defines an integrator. An integrator defines …\nA struct representing the various options and parameters …\nA reference to the renderer itself\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe normal integrator is a diagnostic integrator that …\nThe outgoing ray\nCalculate the color value for a particular pixel, given a …\nCalculate the color value for a particular pixel, given a …\nA reference to the sampler to use with the integrator\nAn implementation of the Whitted/direct lighting rendering …\nThe parameters for the <code>Normal</code> integrator\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe parameters for the Whitted integrator\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe recursion limit for rays\nThe recursive helper method for the Whitted integrator\nThis trait defines some sort of object that can specify …\nThe result of the BSDF scatter function\nThe different types of <code>BSDF</code> types that can be used as …\nThe attenuation factor to apply to the outgoing ray\nThe BSDF for dielectrics/glass-like materials\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe outgoing ray\nReturn the result of a scattering function on an input ray\nReturn the result of a scattering function on an input ray\nAn implementation of the Blinn-Phong BSDF\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe BSDF model for a perfectly smooth dielectric material\nThe fraction of light absorbed in each color channel\nThe default provider for <code>albedo</code> in <code>Dielectric</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDetermine whether a ray will refract given the parameters\nThe refraction index of the material\nA diffuse BSDF function\nThe fraction of light that is absorbed for each color …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA perfect mirror surface\nThe color of the mirror surface\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe perturbation factor for the surface, which dictates …\nMirror a vector about a unit direction\nSchlick’s algorithm for computing a reflection …\nA standard ray with an origin point and a directional …\nThe normalized direction of the ray\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA convenience method to create a new ray given an origin …\nThe origin point of the ray in three-dimensional space\nAll of the information associated with the renderer …\nA small convenience method to generate the progress bar …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRender the image, returning a buffer of pixels\nSet the number of threads in the global threadpool\nContains the error value\nThe interface for an in-place sampler that can …\nThe user requested more samples for an inded than the …\nThe sampler has been exhausted, and cannot generate any …\nContains the success value\nThe generic interface for a rendering sampler\nThe possible errors that a <code>Sampler</code> can return\nA convenient type alias for when a result can return a …\nThe interface for a sampler that needs to be queried …\nThe caller requested more dimensions than the sampler …\nReturns the argument unchanged.\nRetrieve the next sample\nCalls <code>U::from(self)</code>.\nGet the next <code>dimensions</code> samples.\nSampling functions for various primitives\nA basic random sampler\nSample a particular dimension and index\nSample all of the dimensions for a particular index\nRequest a certain number of dimensions for a particular …\nThe number of dimensions the sampler was able to provide\nThe number of dimensions that were requested\nThe dimensions the sampler was able to supply\nGenerate a random sample in the unit disk\nGenerate a random sample in the unit sphere\nAn implementation of a basic random sampler\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA phantom data marker so we can use the <code>T</code> type parameter\nThe PRNG to use with the random sampler\nCreate a new random sampler with a given seed\nA struct representing the scene description as the user …\nThe acceleration structure to use with the scene\nThe background color to return when no objects are hit\nThe camera to use with the scene\nReturns the argument unchanged.\nThe vertical resolution of the scene, in pixels\nThe integrator to use to render the scene\nCalls <code>U::from(self)</code>.\nA list of all of the geometric objects in the scene\nThe number of samples to take per pixel. This is …\nThe horizontal resolution of the scene, in pixels\nThe floating point error threshold to use with the renderer\nThe particular floating point type that is going to be …\nThe particular integer type to use in this program.\nA type representing the RGB value of a pixel in the …\nThe particular unsigned integer type to use in this …\nGenerate a trait that is the sum of other trait bounds\nCompare two floating point vectors\nThe floating point error threshold to use with the …\nThe x component of the vector.\nThe y component of the vector.\nThe z component of the vector.")